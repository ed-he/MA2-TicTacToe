// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_xoxo/test/leaderboard_view_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_xoxo/models/player.dart' as _i2;
import 'package:flutter_xoxo/repositories/leaderboard/leaderboard_repository.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakePlayer_0 extends _i1.SmartFake implements _i2.Player {
  _FakePlayer_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [LeaderboardRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockLeaderboardRepository extends _i1.Mock
    implements _i3.LeaderboardRepository {
  MockLeaderboardRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Player>> getAllPlayers() => (super.noSuchMethod(
        Invocation.method(
          #getAllPlayers,
          [],
        ),
        returnValue: _i4.Future<List<_i2.Player>>.value(<_i2.Player>[]),
      ) as _i4.Future<List<_i2.Player>>);

  @override
  _i4.Future<_i2.Player> getPlayerById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getPlayerById,
          [id],
        ),
        returnValue: _i4.Future<_i2.Player>.value(_FakePlayer_0(
          this,
          Invocation.method(
            #getPlayerById,
            [id],
          ),
        )),
      ) as _i4.Future<_i2.Player>);

  @override
  _i4.Future<void> addPlayerById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #addPlayerById,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> addPlayerWinById(String? id) => (super.noSuchMethod(
        Invocation.method(
          #addPlayerWinById,
          [id],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}
